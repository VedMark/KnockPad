#ifndef LINE_H
#define LINE_H

#include <QObject>
#include <QPainter>
#include <QPoint>

#include "Symbol.h"

typedef QList<Symbol> SymbolList;

class Line : public QObject
{
    Q_OBJECT

public:
    explicit Line(QObject *parent = 0);
    explicit Line(Symbol symbol, QObject *parent = Q_NULLPTR);
    ~Line();

    inline qint64 getHeight() const { return height_; }
    inline qint64 getWidth() const { return width_; }

    inline Symbol pop_front();
    inline Symbol pop_back();
    inline void push_front(Symbol&);
    inline void push_back(Symbol&);
    inline void insert(int pos, Symbol&);
    inline Symbol& erase(int pos);

    int getSymbolBegin(int x);

    // Divides text into two parts after pos and creates new Line;
    Line* setNewLine(qint64 pos, QObject *parent = Q_NULLPTR);

    void draw(QPoint pos, QPainter &device);

signals:
    void heightChanged();
    void widthChanged();

private:
    void raise_height(int);
    void reduce_height(int);

    SymbolList content_;
    int contentSize_;

    qint64 width_;
    qint64 height_;
};

typedef QList<Line> LineList;

class Text
{
public:
    explicit Text(QObject *parent = Q_NULLPTR);
    ~Text();
    
    inline qint64 getHeight() const { return height_; }
    
    inline Line pop_front();
    inline Line pop_back();
    inline void push_front(Line&);
    inline void push_back(Line&);
    inline void insert(int pos, Line&);
    inline Line& erase(int pos);

    QPoint getShiftByCoord(QPoint p);

private:
    void raise_height(int);
    void reduce_height(int);
    
    LineList strings;
    int height_;
};

#endif
